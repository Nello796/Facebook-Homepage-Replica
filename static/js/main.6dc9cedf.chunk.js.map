{"version":3,"sources":["components/postGenerator/PostGenerator.js","components/articles/mainWrapPost/MainWrapPost.js","components/articles/mainWrapComments/comments/Comments.js","components/articles/mainWrapComments/MainWrapComments.js","components/articles/article.js","components/App.js","serviceWorker.js","index.js","assets/profile-picture.jpg"],"names":["PostGenerator","state","value","handleChangeTextarea","e","setState","target","length","document","getElementById","style","fontSize","handleSubmit","preventDefault","props","addPost","className","onSubmit","this","src","ProfilePicture","alt","id","name","placeholder","onChange","type","React","Component","MainWrapPost","handleLike","isLiked","handleLikes","time","postContent","like","comments","share","view","onClick","Comments","comment_tool_menu","toggleCommentToolMenu","prevState","commentContent","removeComment","postID","MainWrapComments","handleComment","handleKeyPress","key","addComment","map","listComments","index","toString","onKeyPress","Article","App","postList","post","isShareLiked","comment","push","commentID","splice","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.6dc9cedf.chunk.js","sourcesContent":["import React from \"react\";\n\nimport TextareaAutosize from 'react-autosize-textarea';\nimport ProfilePicture from '../../assets/profile-picture.jpg';\n\nimport './postGenerator.scss';\n\nclass PostGenerator extends React.Component {\n\n    state = {\n        value: ''\n    }\n\n    handleChangeTextarea = (e) => {\n        this.setState({value: e.target.value});\n        (this.state.value.length >= 50)\n            ? document.getElementById('test').style.fontSize = '1.6rem'\n            : document.getElementById('test').style.fontSize = '2rem';\n    }\n\n    handleSubmit = (e) => {\n\n        e.preventDefault();\n        this.props.addPost(this.state.value);\n        this.setState({ value: '' });\n    }\n\n    render() {\n        return (\n            <div className=\"post-generator-wrap\">\n                <form onSubmit={ this.handleSubmit }>\n                    <div className=\"insert-post-section\">\n                        <div><img src={ ProfilePicture } className=\"profile-picture\" alt=\"Profile\"/></div>\n\n                        <div>\n                            <TextareaAutosize\n                                id='test'\n                                className=\"text-area-autosize-post\"\n                                name=\"text-post\"\n                                placeholder=\"What are you thinking, Fabion ?\"\n                                value={ this.state.value }\n                                onChange={ this.handleChangeTextarea }\n                            />\n                        </div>\n                    </div>\n\n                    <div>\n                        <button type=\"submit\" className=\"btn-post\">Post</button>\n                    </div>\n                </form>\n            </div>\n        );\n    };\n}\n\nexport default PostGenerator;\n","import React from \"react\";\n\nimport ProfilePicture from \"../../../assets/profile-picture.jpg\";\n\nclass MainWrapPost extends React.Component {\n\n    handleLike = () =>\n        this.props.isLiked\n            ? this.props.handleLikes(-1, false, this.props.id)\n            : this.props.handleLikes(+1, true, this.props.id)\n\n    render() {\n        return (\n            <div className=\"main-wrap-post\">\n                <div className=\"account-info\">\n                    <div>\n                        <img\n                            src={ ProfilePicture }\n                            className=\"profile-picture\"\n                            alt=\"Profile\"\n                        />\n                    </div>\n\n                    <div>\n                        <h3><a>{this.props.name}</a></h3>\n                        <small>{this.props.time} . <i className=\"fas fa-globe-africa\"></i></small>\n                    </div>\n                </div>\n\n                <div className=\"post-content\">\n                    <pre>{this.props.postContent}</pre>\n                </div>\n\n                <div className=\"post-info\">\n                    <div>\n                        {(this.props.like !== 0)\n                            ? <div><i className=\"fas fa-thumbs-up\"></i><p>{this.props.like}</p></div>\n                            : null}\n                    </div>\n\n                    <div>\n                        <p>{this.props.comments.length} Comments</p>\n                        <p>{this.props.share} Shares</p>\n                        <p>{this.props.view} Views</p>\n                    </div>\n                </div>\n\n                <div className=\"menu-interaction\">\n                    <div\n                        onClick={ this.handleLike }\n                        className={ (this.props.isLiked ? \"blue_color\" : null) }>\n                        <i className=\"far fa-thumbs-up\"></i>\n                        Like\n                    </div>\n\n                    <div><i className=\"far fa-comment-alt\"></i> Comment</div>\n                    <div><i className=\"fas fa-share\"></i> Share</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MainWrapPost;","import React from \"react\";\n\nimport ProfilePicture from \"../../../../assets/profile-picture.jpg\";\n\nimport './comments.scss';\n\nclass Comments extends React.Component {\n\n    state = {\n        comment_tool_menu: ''\n    }\n\n    toggleCommentToolMenu = () => {\n\n        if (this.state.comment_tool_menu.length === 0) {\n\n            this.setState(prevState => ({\n                comment_tool_menu: prevState.comment_tool_menu = 'show-comment-tool-menu'\n            }));\n        } else {\n\n            this.setState(prevState => ({\n                comment_tool_menu: prevState.comment_tool_menu = ''\n            }));\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"comment-wrap\">\n                <div><img src={ProfilePicture} className=\"profile-picture-comments\" alt=\"Profile\"/></div>\n\n                <div className=\"comment\">\n                    <div>\n                    <pre>\n                        <span>{this.props.comments.name}</span>\n                        {this.props.comments.commentContent}\n                    </pre>\n\n                        <div className=\"comment-tool-menu-wrap\">\n                            <i\n                                id=\"btn-open-comment-tool-menu\"\n                                className=\"fas fa-ellipsis-h\"\n                                onClick={ this.toggleCommentToolMenu }\n                            ></i>\n\n                            <div id=\"comment-tool-menu\" className={ this.state.comment_tool_menu }>\n                                <p><i className=\"fas fa-pen\"></i> Edit</p>\n                                <p onClick={ () => this.props.removeComment(this.props.postID, this.props.id) } ><i className=\"fas fa-trash\"></i> Delete</p>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"comment-menu-option\">\n                        <p>Like</p>\n                        <span>.</span>\n                        <p>Comment</p>\n                        <span> . </span>\n                        <span>Undefined</span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Comments;","import React from \"react\";\n\nimport ProfilePicture from \"../../../assets/profile-picture.jpg\";\nimport TextareaAutosize from \"react-autosize-textarea\";\n\nimport Comments from \"./comments/Comments.js\";\n\nclass MainWrapComments extends React.Component {\n\n    state = {\n        value: ''\n    }\n\n    handleComment = (e) => {\n        this.setState({ value: e.target.value });\n    }\n\n    handleKeyPress = (e) => {\n\n        if (e.key === 'Enter')\n            e.preventDefault();\n\n        if (e.key === 'Enter' && this.state.value !== '') {\n\n            this.props.addComment(this.state.value, this.props.id);\n            this.setState(prevState => ({value: ''}));\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"main-wrap-comments\">\n                {this.props.comments.map((listComments, index) =>\n                    <Comments\n                        key={ index.toString() }\n                        id={ index }\n                        postID={ this.props.id }\n                        comments={ listComments }\n                        removeComment={ this.props.removeComment }\n                    />\n                )}\n\n                <form className=\"add-comment-form\">\n                    <div>\n                        <img\n                            src={ ProfilePicture }\n                            className=\"profile-picture-comments\"\n                            alt=\"Profile\"/>\n\n                        <TextareaAutosize\n                            className=\"text-area-autosize-comment\"\n                            onChange={ this.handleComment }\n                            onKeyPress={ this.handleKeyPress }\n                            value={ this.state.value }\n                            placeholder=\"Write a comment...\"\n                        />\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default MainWrapComments;","import React from \"react\";\n\nimport MainWrapPost from \"./mainWrapPost/MainWrapPost\";\nimport MainWrapComments from './mainWrapComments/MainWrapComments';\n\nimport './article.scss';\n\nconst Article = (props) => {\n    return (\n        <article className=\"article\">\n            <MainWrapPost\n                id={ props.id }\n                name={ props.name }\n                time={ props.time }\n                postContent={ props.postContent }\n                like={ props.like }\n                comments={ props.comments }\n                share={ props.share }\n                view={ props.view }\n                isLiked={ props.isLiked }\n                handleLikes={ props.handleLikes }\n            />\n\n            <MainWrapComments\n                comments={ props.comments }\n                addComment={ props.addComment }\n                removeComment={ props.removeComment }\n                id={ props.id }\n            />\n        </article>\n    );\n}\n\nexport default Article;","import React from 'react';\n\nimport PostGenerator from './postGenerator/PostGenerator';\nimport Article from './articles/article';\n\nclass App extends React.Component {\n\n    state = {\n        postList: []\n    }\n\n    addPost = (post) => {\n        this.setState( prevState => {\n            return {\n                postList: [\n                    {\n                        name: 'Fabion Delishaj',\n                        postContent: post,\n                        time: 'Undefined',\n                        like: 0,\n                        isLiked: false,\n                        isShareLiked: false,\n                        comments: [],\n                        share: 0,\n                        view: 0\n                    },\n                    ...prevState.postList\n                ]\n            };\n        });\n    }\n\n    addComment = (comment, index) => {\n        this.setState( prevState => ({\n                comments: prevState.postList[index].comments.push({name: 'Fabion Delishaj', commentContent: comment})\n        }));\n    }\n\n    removeComment = (postID, commentID) => {\n        let listComments = this.state.postList[postID].comments;\n        listComments.splice(commentID, 1);\n        this.setState( prevState => ({ comments: listComments }))\n    }\n\n    handleLikes = (value, isLiked, index) => {\n        this.setState( prevState => ({\n            like: prevState.postList[index].like += value,\n            isLiked: prevState.postList[index].isLiked = !prevState.postList[index].isLiked\n        }));\n    }\n\n    render() {\n        return (\n            <section className=\"app\">\n                <PostGenerator\n                    addPost={ this.addPost }\n                />\n\n                <section className=\"main-section\">\n                    {this.state.postList.map( (post, index) =>\n                        <Article\n                            key={ index.toString() }\n                            id={ index }\n                            name={ post.name }\n                            postContent={ post.postContent }\n                            time={ post.time }\n                            like={ post.like }\n                            comments={ post.comments }\n                            share={ post.share }\n                            view={ post.view }\n                            isLiked={ post.isLiked }\n                            addComment={ this.addComment }\n                            removeComment={ this.removeComment }\n                            handleLikes={ this.handleLikes }\n                        />\n                    )}\n                </section>\n            </section>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport './index.scss';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/profile-picture.4d9c5ba4.jpg\";"],"sourceRoot":""}